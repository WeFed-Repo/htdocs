// Cerca i colori e se sono presenti come variabile
// li converte in filtri compatibili con IE

@mixin color_overlay($hex: $black){
  // Applica i filters per webkit
  @include color_overlay__svg_inline('-webkit-filter',$hex);
  // Se il colore esiste negli array $colors e $colors_filters
  // usa il fallback utile alla compatibilit√† IE.
  // Se no usa la sintassi webkit.
  @if( color_exist_in_maps($hex) ) {
    @include color_overlay__filter('filter',$hex);
  } @else {
    @include color_overlay__svg_inline('filter',$hex);
  }
}

@mixin color_overlay__svg_inline($property,$hex: $black){
  // COLOR A NOT-INLINE SVG: https://codepen.io/mstadius/pen/pJoNJX
  // get rgb values from hex
  $red: red($hex);
  $green: green($hex);
  $blue: blue($hex);
  // convert rgb to 0 ... 1
  $red_c: ($red / 255);
  $green_c: ($green / 255);
  $blue_c: ($blue / 255);
  $name: #{$red}_#{$green}_#{$blue};
  $id: "co#{$name}";
  $svg: "<svg xmlns='http://www.w3.org/2000/svg' version='1.1'> " +
          "<defs> <filter id='#{$id}'> " +
            "<feColorMatrix in='SourceGraphic' type='matrix' values='" +
              "0 0 0 0 #{$red_c} 0 0 0 0 #{$green_c} 0 0 0 0 #{$blue_c} 0 0 0 1 0' " +
            "/> " +
            "</filter> </defs> " +
        "</svg>";
  $data: "data:image/svg+xml,#{$svg}#"+"#{$id}";
  #{$property}:url("#{$data}");
}

@mixin color_overlay__filter($property,$hex){
  $key_in_colors : map_get_key($colors,$hex);
  $value_in_filters : map-get($colors_filters,$key_in_colors);
  #{$property}: #{ $value_in_filters };
}

@mixin svg-icon-color($color) {
  color: #{$color} !important;
  fill: #{$color} !important;
  @include color_overlay($color);
}
